;; Literals : bool , sym , int 
(check-principal-type #t bool)
(check-principal-type 'abc sym)
(check-principal-type 3 int)
;;IFX 
(check-principal-type (if #t 1 3) int)
(check-type-error (if #t 1 'abc))
(check-type-error (if 1 1 2))
;;BEGIN
(check-principal-type (begin (if #t 'a 'b) (if #f 1 2)) int)
(check-principal-type (begin (if #t 'a 'b) (if #f 1 2) 1 'a) sym)
(check-principal-type (begin ) unit)
;;LAMBDA 
(check-principal-type (lambda(a b)(+ a b)) (int int -> int))
(check-principal-type (lambda(a b)(if a a b)) (bool bool -> bool))
(check-type-error (lambda(empty_list)(pair (cons 1 empty_list) 
                      (cons #t empty_list))))
;;LET , LETSTAR
(check-principal-type (let([x 2][y 3])(+ x y)) int)
(check-principal-type (let([x 2][y 3])(= x y)) bool)
(check-type-error (let([x 2][y #t])(+ x y)))
(check-type-error (let*([x 2][y (+ x 1)])(cons x y)))
(check-principal-type (let()(= 1 1)) bool)
;;(val ss (lambda (y)
;;(let ([single (lambda (x) (cons x '()))])
;;(single (single y)))))
;;LETREC
(check-principal-type (letrec([y (lambda(a b)(f a b))]
[f (lambda(x y)(> x y))])(y 1 2)) bool)
(check-principal-type 
(letrec([y (lambda(a b)(f a b))][f (lambda(x y)(> x y))])(y 1 2)) bool)
;;
;;LIST LITERALS
(check-principal-type '() (forall['a](list 'a)))
(check-principal-type '(1 2 3) (list int))
(check-principal-type (cons 1 '(2 3)) (list int))
(check-type-error (cons 1 '(#t #f)))
(check-principal-type (cons 1 '()) (list int))

(check-expect (cons '(a b) '()) '((a b)))
